# -*- coding: utf-8 -*-
"""LifeExpectancyData

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BJ2XSM9mP9KH5sNNFpm7UQedCNvLgJfj
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt


class LifeExpectencyData:
  ''' This class consists of functions related to reading file and displaying the data'''

  # Read Life Expectency File
  def read_LifeExpectency_File(filepath):
    try:
      life_Exp_India = pd.read_csv(filepath)
    except IOError as err:
      print("Error: can\'t find file or read data. \nDetailed error is {}".format(err))
    else:
      print ("Life Expectency File read successfully")
      return life_Exp_India

  # Read Pollution File
  def read_Pollution_File(filepath):
    try:
      pollution = pd.read_csv(filepath)
    except IOError as err:
      print("Error: can\'t find file or read data. \nDetailed error is {}".format(err))
    else:
      print ("Pollution File read successfully")
      return pollution
  
  # Displaying first 5 data of Life Expectency File
  def get_LifeExpectency_HeadData(life_Exp_India):
    try:
      return life_Exp_India.head()
    except:
      print("Error showing the data.")
  
  # Displaying first 5 data of Pollution File
  def get_Pollution_HeadData(pollution):
    try:
      return pollution.head()
    except:
      print("Error showing the data.")

class LifeExpectencyDataFrame:
  '''Functions to work on obtained Dataframe to check for Column Information, Null values, Duplicates'''

  # -- Life Expectency India Dataset --
  # Get Column Information for Life Expectency Dataset
  def get_DF_India_Info(life_Exp_DF_India):
    try:
      return life_Exp_DF_India.info()
    except:
      print("Unable to fetch Life Expectency Data Frame Information.")
  
  # Check for the Null value in Life Expectency Dataset
  def get_DF_India_NullValues(life_Exp_DF_India):
    try:
      return life_Exp_DF_India.isnull().sum()
    except:
      print("Unable to print Life Expectency Null values.")

  # Drop the Null value in Life Expectency Dataset
  def get_DF_India_DropDuplicates(life_Exp_DF_India):
    try:
      return life_Exp_DF_India.drop_duplicates()
    except:
      print("Unable to drop Life Expectency duplicate values.")
  

  # -- Pollution Dataset --
  # Get Column Information for Pollution Dataset
  def get_DF_Pollution_Info(DF_Pollution):
    try:
      return DF_Pollution.info()
    except:
      print("Unable to fetch Life Expectency Data Frame Information.")

  # Check for the Null value in Pollution Dataset
  def get_DF_Pollution_NullValues(DF_Pollution):
    try:
      return DF_Pollution.isnull().sum()
    except:
      print("Unable to print Pollution Null values.")


  # Drop the Null value in Life Expectency Dataset
  def get_DF_Pollution_DropDuplicates(DF_Pollution):
    try:
      return DF_Pollution.drop_duplicates()
    except:
      print("Unable to drop Pollution duplicate values.")

def outliers(df,ft):
  Q1=df[ft].quantile(0.25)
  Q3=df[ft].quantile(0.75)
  IQR=Q3-Q1
  lower_bound=Q1-1.5*IQR
  upper_bound=Q1+1.5*IQR
  ls=df.index[(df[ft]<lower_bound) | (df[ft]>upper_bound)]
  return ls

def remove(df,ls):
  ls=sorted(set(ls))
  df=df.drop(ls)
  return df

def literacyRate(final):
  highLiteracyCount = 0
  lowLiteracyCount = 0
  index = 0
  for i in final['Literacy_Rate']:
    if i > 70.00:
      highLiteracyCount += 1
    elif i <= 70.00:
      lowLiteracyCount = lowLiteracyCount + 1
  print("The Total number of States having Low Literacy Rate are {} \nand States with States with High Literacy Rate are {}".format(lowLiteracyCount,highLiteracyCount))

class LifeExpectancyDataNumerical:

    def get_Ceil(life_Exp_India):
      life_Exp_India['Undernutrition'] = life_Exp_India['Undernutrition'].apply(np.ceil)
      return life_Exp_India
      
    def get_floor(life_Exp_India):
      life_Exp_India['Undernutrition'] = life_Exp_India['Undernutrition'].apply(np.floor)
      return life_Exp_India

class LifeExpectancyEDA:

  # ---- Box Plot ----
  def get_LifeExpectancy_Boxplot(life):
    try:
      sns.set(style='whitegrid')
      fig,ax=plt.subplots(figsize=(20,10))
      b=sns.boxplot(data=life)
      plt.show()
    except:
      print("Unable to print Life Expectancy Boxplot")
  
  
  def get_Pollution_Boxplot(pollution):
    try:
      sns.set(style='whitegrid')
      fig,ax=plt.subplots(figsize=(20,15))
      b=sns.boxplot(data=pollution)
      plt.show()
    except:
      print("Unable to print Pollution Boxplot")

  
  def get_Complete_Boxplot(final):
    try:
      sns.set(style='whitegrid')
      fig,ax=plt.subplots(figsize=(25,15))
      b=sns.boxplot(data=final.iloc[:,2:])
      plt.show()
    except:
      print("Unable to print merged Boxplot")

  
  # ---- Pair Plot ----
  def get_LifeExpectancy_Pairplot(life):
    try:
      sns.pairplot(data=life)
    except:
      print("Unable to print Life Expectancy Pairplot")

  def get_Pollution_Pairplot(DF_Pollution):
    try:
      sns.pairplot(data= DF_Pollution)
    except:
      print("Unable to print Pollution Pairplot")


  # ---- Heat Map ----
  def get_LifeExpectancy_Heatmap(life_Exp_DF_India):
    try:
      plt.figure(figsize=(18,10))
      annot=True
      hm=sns.heatmap(life_Exp_DF_India.corr(),annot=annot)
    except:
      print("Unable to print Life Expectancy Heat map")
  
  def get_Pollution_Heatmap(DF_Pollution):
    try:
      plt.figure(figsize=(18,10))
      annot=True
      hm=sns.heatmap(DF_Pollution.corr(),annot=annot)
    except:
      print("Unable to print Pollution Heat map")

  
  def get_Complete_Heatmap(final):
    try:
      plt.figure(figsize=(18,10))
      annot=True
      hm=sns.heatmap(final.corr(),annot=annot)
    except:
      print("Unable to print merged Heat map")

  
  # ---- Sub Plot ----

  def get_Complete_Subplot(Final):
    try:
      for i in Final.columns:
        sns.set(style='whitegrid')
        fig,ax=plt.subplots(figsize=(5,5))
        plt.scatter(x=Final[i],y=Final["Avg_Life_Expectancy"])
        plt.xlabel("{}".format(i))
        plt.ylabel("Avg_Life_Expectancy")
    except:
      print("Unable to print sub plot")

  
  def get_Complete_Subplot_Hist(final):
    try:
      plt.figure(figsize=(15, 20))
      for i in final.columns:
        fig,ax=plt.subplots(figsize=(5,5))
        plt.hist(final[i])
        plt.xlabel("{}".format(i))
    except:
      print("Unable to print Histogram")

  def get_Complete_Hist(feature,final):
    try:
      plt.figure(figsize=(15, 20))
      for i in enumerate(feature):
          plt.subplot(5, 4, i[0]+1)
          plt.hist(i[1],data=final)
          plt.xlabel("{}".format(i))
    except:
      print("Unable to print Histogram")
    
